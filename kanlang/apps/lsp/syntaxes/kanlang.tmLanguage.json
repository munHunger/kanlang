{
  "name": "Kanlang",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#whitespace"
    },
    {
      "include": "#literal"
    },
    {
      "include": "#number"
    },
    {
      "include": "#boolean"
    },
    {
      "include": "#operator"
    },
    {
      "include": "#identifier"
    },
    {
      "include": "#punct"
    }
  ],
  "repository": {
    "comment": {
      "patterns": [
        {
          "name": "comment.block",
          "match": "\\/\\/.*"
        }
      ]
    },
    "keyword": {
      "patterns": [
        {
          "name": "keyword.control.kanlang",
          "match": "(if|else|for|while|return|let|type|alias|as)"
        }
      ]
    },
    "whitespace": {
      "patterns": [
        {
          "name": "whitespace.kanlang",
          "match": "\\s"
        }
      ]
    },
    "literal": {
      "patterns": [
        {
          "name": "string",
          "match": "\".*\""
        }
      ]
    },
    "number": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\d+(\\.\\d+)?"
        }
      ]
    },
    "boolean": {
      "patterns": [
        {
          "name": "constant.language",
          "match": "true|false"
        }
      ]
    },
    "operator": {
      "patterns": [
        {
          "name": "keyword.operator.kanlang",
          "match": "(\\+|==|=|!|-|\\*|\\/)"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "name": "variable.parameter.kanlang",
          "match": "[a-zA-Z][a-zA-Z0-9_]*"
        }
      ]
    },
    "punct": {
      "patterns": [
        {
          "name": "support.other.kanlang",
          "match": "(;|\\(|\\)|{|}|,|:)"
        }
      ]
    }
  },
  "scopeName": "text.kanlang"
}