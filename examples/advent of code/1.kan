type Error alias string

(a: string): NumericString | Error {
    splitOperator := "" as SplitOperator;
    for part in *[SubString] {
        if part != "0" {
            if part != "1" {
                if part != "2" {
                    if part != "3" {
                        if part != "4" {
                            if part != "5" {
                                if part != "6" {
                                    if part != "7" {
                                        if part != "8" {
                                            if part != "9" {
                                                return "string is not numeric" as Error;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    return a as NumericString;
}

(a: NumericString): ParsedNumericString alias num {
    splitOperator := "" as SplitOperator;
    splitString := a as string;
    val := 0;
    for part in *[SubString] {
        if val != 0 {
            val = val * 10;
        }
        num := 0;
        if part == "1" {
            num = 1;
        }
        if part == "2" {
            num = 2;
        }
        if part == "3" {
            num = 3;
        }
        if part == "4" {
            num = 4;
        }
        if part == "5" {
            num = 5;
        }
        if part == "6" {
            num = 6;
        }
        if part == "7" {
            num = 7;
        }
        if part == "8" {
            num = 8;
        }
        if part == "9" {
            num = 9;
        }
        val = val + num;
    }
    return val as ParsedNumericString;
}

type Bag alias [string]
type CalorieInBag alias num
type CaloricBags alias [CalorieInBag]

(input: FileContent): [Bag] {
    
    splitOperator := "\n" as SplitOperator;
    bag := [] as Bag;
    bags := [] as [Bag];
    for part in *[SubString] {
        test := part as string;
        if *StringLength != 0 {
            bag = [...bag, test] as Bag;
        }
        if *StringLength == 0 {
            bags = [...bags, bag];
            bag = [] as Bag;
        }
    }
    return bags;
}

(bag: Bag): CalorieInBag {
    sum := 0;
    for part in bag {
        if *StringLength != 0 {
            cal := *NumericString {
                e: Error {
                    pre := part as PrefixString;
                    post := " is not a number string" as SuffixString;
                    m := *StringConcat as LogMsg; *LogResult;
                    return 0 as CalorieInBag;
                }
            };
            sum = sum + *ParsedNumericString;
        }
    }
    return sum as CalorieInBag;
}

(bags: [Bag]): CaloricBags {
    res := [] as CaloricBags;
    for bag in bags {
        res = [...res, *CalorieInBag] as CaloricBags;
    }
    return res;
}

(bags: CaloricBags): MaxCaloricBag alias num {
    max := 0;
    for bag in bags {
        if bag as num > max {
            max = bag as num;
        }
    }
    return max as MaxCaloricBag;
}

(): SysCode {
    filePath := "./1.txt" as FilePath;
    label := "Max bag " as PrefixString;
    max := *MaxCaloricBag as num;
    value := max to NumericString as SuffixString;
    c := *StringConcat as LogMsg; *LogResult; //should give 66719
    return true as SysCode;
}